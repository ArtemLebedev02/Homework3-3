/*На вебинаре мы изучили, что такое бинарное дерево и начали реализовывать методы взаимодействия с бинарным деревом.
        Повторите материал, разобранный на уроке и добавьте метод удаления элементов для нашего бинарного дерева.*/
class CustomLinkedList<E> {
    Node<E> first;
    Node<E> last;
    int size = 0;

    public static class Node<E> {

        E item;
        Node<E> next;
        Node<E> prev;


        Node(Node<E> prev, E element, Node<E> next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }

        void linkLast(E e) {
            final Node<E> l = last;
            final Node<E> newNode = new Node<>(l, e, null);
            last = newNode;
            if (l == null)
                first = newNode;
            else
                l.next = newNode;
            size++;
        }

        void linkBefore(E e, Node<E> succ) {
            final Node<E> pred = succ.prev;
            final Node<E> newNode = new Node<>(pred, e, succ);
            succ.prev = newNode;
            if (pred == null)
                first = newNode;
            else
                pred.next = newNode;
            size++;
        }

        E unlink(Node<E> x) {
            final E element = x.item;
            final Node<E> next = x.next;
            final Node<E> prev = x.prev;
            if (prev == null) {
                first = next;
            } else {
                prev.next = next;
                x.prev = null;
            }
            if (next == null) {
                last = prev;
            } else {
                next.prev = prev;
                x.next = null;
            }
            x.item = null;
            size--;
            return element;
        }

        Node<E> node(int index) {
            if(index < (size >> 1)) {
                Node<E> x = first;
                for (int i = 0; i < index; i++)
                    x = x.next;
                return x;
            } else {
                Node<E> x = last;
                for (int i = size - 1; i > index; i--)
                    x = x.prev;
                return x;
            }
        }

        public E get(int index) {
            checkElementIndex(index);
            return node(index).item;
        }

        private void checkElementIndex(int index) {
            if (!isElementIndex(index))
                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }

        private boolean isElementIndex(int index) {
            return index >= 0 && index < size;
        }

        public int size() {
            return size;
        }

        public boolean add(E e) {
            linkLast(e);
            return true;
        }

        private boolean isPositionIndex(int index) {
            return index >= 0 && index <= size;
        }

        private void checkPositionIndex(int index) {
            if (!isPositionIndex(index))
                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }

        public void add(int index, E element) {
            checkPositionIndex(index);
            if (index == size)
                linkLast(element);
            else
                linkBefore(element, node(index));
        }

        public boolean remove(Object o) {
            if (o == null) {
                for (Node<E> x = first; x != null; x = x.next) {
                    if (x.item == null) {
                        unlink(x);
                        return true;
                    }
                }
            } else {
                for (Node<E> x = first; x != null; x = x.next) {
                    if (o.equals(x.item)) {
                        unlink(x);
                        return true;
                    }
                }
            }
            return false;
        }

        String outOfBoundsMsg(int index) {
            return "Index: " + index + ", Size: " + size;
        }

        public static void main(String[] args) {
            CustomLinkedList<Integer> arr = new CustomLinkedList<>();
            arr.add(2);
            arr.add(4);
            arr.add(6);
            arr.add(8);
            arr.add(10);
            System.out.println(arr.size());
            System.out.println(arr.get(1));
            arr.remove(4);
            System.out.println(arr.get(1));
        }
    }
